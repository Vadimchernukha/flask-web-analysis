from flask import Flask, render_template, request, send_file, jsonify
import threading
import logic  # –ü–µ—Ä–≤–∞—è –ª–æ–≥–∏–∫–∞
import logic2  # –í—Ç–æ—Ä–∞—è –ª–æ–≥–∏–∫–∞
import time

app = Flask(__name__)

progress = 0
is_running = False
current_site = "Waiting..."
domains_loaded = 0
domains_after_stage1 = 0
domains_final = 0

input_file = "web.txt"  # –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
output_file_stage1 = "transite.txt"  # –†–µ–∑—É–ª—å—Ç–∞—Ç 1 —ç—Ç–∞–ø–∞
output_file_final = "results.txt"  # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç


def run_analysis():
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –¥–≤—É—Ö—ç—Ç–∞–ø–Ω—ã–π –∞–Ω–∞–ª–∏–∑: —Å–Ω–∞—á–∞–ª–∞ logic.py, –∑–∞—Ç–µ–º logic2.py.
    """
    global progress, is_running, current_site, domains_after_stage1, domains_final
    is_running = True
    progress = 0

    with open(input_file, "r", encoding="utf-8") as f:
        sites = [line.strip() for line in f if line.strip()]

    total_sites = len(sites)
    if total_sites == 0:
        is_running = False
        return

    # üîπ **–ü–µ—Ä–≤—ã–π —ç—Ç–∞–ø (–æ–±—â–∏–π –∞–Ω–∞–ª–∏–∑)**
    for index, site in enumerate(sites):
        if not is_running:
            break
        current_site = f"Stage 1: {site}"  # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Å–∞–π—Ç
        logic.process_website(site, output_file_stage1)  # –ü–µ—Ä–≤—ã–π –∞–Ω–∞–ª–∏–∑
        progress = int(((index + 1) / total_sites) * 50)  # –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ 50%

    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∞–π—Ç–æ–≤ –ø–æ—Å–ª–µ 1 —ç—Ç–∞–ø–∞
    with open(output_file_stage1, "r", encoding="utf-8") as f:
        domains_after_stage1 = len(f.readlines())

    # üîπ **–í—Ç–æ—Ä–æ–π —ç—Ç–∞–ø (–≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑)**
    with open(output_file_stage1, "r", encoding="utf-8") as f:
        stage1_results = [line.strip() for line in f if line.strip()]

    total_stage1 = len(stage1_results)
    for index, site in enumerate(stage1_results):
        if not is_running:
            break
        current_site = f"Stage 2: {site}"  # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Å–∞–π—Ç
        logic2.process_website(site, output_file_final)  # –í—Ç–æ—Ä–æ–π –∞–Ω–∞–ª–∏–∑
        progress = 50 + int(((index + 1) / total_stage1) * 50)  # –ü—Ä–æ–≥—Ä–µ—Å—Å 50-100%

    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–º–µ–Ω–æ–≤
    with open(output_file_final, "r", encoding="utf-8") as f:
        domains_final = len(f.readlines())

    is_running = False
    progress = 100
    current_site = "Done!"


@app.route("/")
def index():
    return render_template("index.html")


@app.route("/upload", methods=["POST"])
def upload_file():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–∞–π—Ç–æ–≤ –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–º–µ–Ω–æ–≤ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.
    """
    global domains_loaded
    file = request.files["file"]
    file.save(input_file)

    # ‚úÖ –ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤
    with open(input_file, "r", encoding="utf-8") as f:
        domains_loaded = sum(1 for _ in f)  # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏

    print(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –¥–æ–º–µ–Ω–æ–≤ (–ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏): {domains_loaded}")  # ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ

    return jsonify({"message": "–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω", "domains_loaded": domains_loaded})



@app.route("/get_domains_count")
def get_domains_count():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏.
    """
    return jsonify({"domains_loaded": domains_loaded})




@app.route("/start_analysis")
def start_analysis():
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.
    """
    global is_running
    if not is_running:
        thread = threading.Thread(target=run_analysis)
        thread.start()
    return jsonify({"message": "–ê–Ω–∞–ª–∏–∑ –Ω–∞—á–∞–ª—Å—è"})


@app.route("/stop_analysis")
def stop_analysis():
    """
    –ü—Ä–µ—Ä—ã–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞.
    """
    global is_running
    is_running = False
    return "–ê–Ω–∞–ª–∏–∑ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"


@app.route("/progress")
def get_progress():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞, —Ç–µ–∫—É—â–∏–π —Å–∞–π—Ç –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.
    """
    return jsonify({
        "progress": progress,
        "current_site": current_site,
        "domains_loaded": domains_loaded,
        "domains_after_stage1": domains_after_stage1,
        "domains_final": domains_final
    })


@app.route("/download")
def download_file():
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ñ–∞–π–ª —Å –∏—Ç–æ–≥–æ–≤—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏.
    """
    return send_file(output_file_final, as_attachment=True)


if __name__ == "__main__":
    app.run(debug=True)
